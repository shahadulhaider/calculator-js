{"version":3,"sources":["src/calculator.js"],"names":["Calculator","previousOperandTextElement","currentOperandTextElement","clear","currentOperand","previousOperand","operation","undefined","toString","slice","number","includes","compute","computation","prev","parseFloat","current","isNaN","stringNumber","integerDigits","split","decimalDigits","integerDisplay","toLocaleString","maximumFractionDigits","innerText","getDisplayNumber"],"mappings":"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","file":"calculator.50359d62.js","sourceRoot":"..","sourcesContent":["export default class Calculator {\n  constructor(previousOperandTextElement, currentOperandTextElement) {\n    this.previousOperandTextElement = previousOperandTextElement\n    this.currentOperandTextElement = currentOperandTextElement\n    this.clear()\n  }\n\n  clear() {\n    this.currentOperand = ''\n    this.previousOperand = ''\n    this.operation = undefined\n  }\n\n  delete() {\n    this.currentOperand = this.currentOperand.toString().slice(0, -1)\n  }\n\n  appendNumber(number) {\n    if (number === '.' && this.currentOperand.includes('.')) return\n    this.currentOperand = this.currentOperand.toString() + number.toString()\n  }\n\n  chooseOperation(operation) {\n    if (this.currentOperand === '') return\n    if (this.previousOperand != '') {\n      this.compute()\n    }\n    this.operation = operation\n    this.previousOperand = this.currentOperand\n    this.currentOperand = ''\n  }\n\n  compute() {\n    let computation\n    const prev = parseFloat(this.previousOperand)\n    const current = parseFloat(this.currentOperand)\n\n    if (isNaN(prev) || isNaN(current)) return\n\n    switch (this.operation) {\n      case '+':\n        computation = prev + current\n        break\n      case '-':\n        computation = prev - current\n        break\n      case 'ร':\n        computation = prev * current\n        break\n      case 'รท':\n        computation = prev / current\n        break\n      default:\n        return\n    }\n    this.currentOperand = computation\n    this.operation = undefined\n    this.previousOperand = ''\n  }\n\n  getDisplayNumber(number) {\n    const stringNumber = number.toString()\n    const integerDigits = parseFloat(stringNumber.split('.')[0])\n    const decimalDigits = stringNumber.split('.')[1]\n    let integerDisplay\n    if (isNaN(integerDigits)) {\n      integerDisplay = ''\n    } else {\n      integerDisplay = integerDigits.toLocaleString('en', {\n        maximumFractionDigits: 0\n      })\n    }\n    if (decimalDigits != null) {\n      return `${integerDisplay}.${decimalDigits}`\n    } else {\n      return integerDisplay\n    }\n  }\n\n\n  updateDisplay() {\n    this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand)\n    if (this.operation != null) {\n      this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`\n    } else {\n      this.previousOperandTextElement.innerText = ''\n    }\n  }\n}"]}